// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/03/a/PC.hdl

/**
 * A 16-bit counter with load and reset control bits.
 * if      (reset[t] == 1) out[t+1] = 0
 * else if (load[t] == 1)  out[t+1] = in[t]
 * else if (inc[t] == 1)   out[t+1] = out[t] + 1  (integer addition)
 * else                    out[t+1] = out[t]
 */

CHIP PC {
    IN in[16],load,inc,reset;
    OUT out[16];

    PARTS:
        // the hierarchy of or precedence is as follows:
        // reset > load > increment > read-only

        // reset has highest priority, so do that operation LAST. reverse the order...

        // this more elegant PC was found at (https://people.duke.edu/~nts9/logicgates/PC.hdl)

        Inc16(in=previous, out=incremented);                     // 1. `inc` is the lowest priority; `previous` ties the previous output and allows the inc to work
        Mux16(a=previous, b=incremented, sel=inc, out=o1);       // 1. if `inc`==1 increment the previous output. Else pass through the previous value unchanged

        Mux16(a=o1, b=in, sel=load, out=o2);                     // 2. the next priority is `load`. load the new value `in` if load==1 else the output from (1)

        Mux16(a=o2, b=false, sel=reset, out=o3);                 // 3. `reset` takes precedence over other actions, so it is performed "last" (it's combinational logic, but still occurs later in the circuit)

        Register(in=o3, load=true, out=previous, out=out);       // 4. push the now configured values out to the register.

        // * this implementation forces a load each iteration vs my previous commits which
        //   checked for actions. I think this way would be faster because the HDL in
        //   `Bit` uses a Mux that forces a load on the DFF anyways. Plus this eliminated
        //   multiple Or gates.
}
