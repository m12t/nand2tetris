// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/05/CPU.hdl

/**
 * The Hack CPU (Central Processing unit), consisting of an ALU,
 * two registers named A and D, and a program counter named PC.
 * The CPU is designed to fetch and execute instructions written in 
 * the Hack machine language. In particular, functions as follows:
 * Executes the inputted instruction according to the Hack machine 
 * language specification. The D and A in the language specification
 * refer to CPU-resident registers, while M refers to the external
 * memory location addressed by A, i.e. to Memory[A]. The inM input 
 * holds the value of this location. If the current instruction needs 
 * to write a value to M, the value is placed in outM, the address 
 * of the target location is placed in the addressM output, and the 
 * writeM control bit is asserted. (When writeM==0, any value may 
 * appear in outM). The outM and writeM outputs are combinational: 
 * they are affected instantaneously by the execution of the current 
 * instruction. The addressM and pc outputs are clocked: although they 
 * are affected by the execution of the current instruction, they commit 
 * to their new values only in the next time step. If reset==1 then the 
 * CPU jumps to address 0 (i.e. pc is set to 0 in next time step) rather 
 * than to the address resulting from executing the current instruction. 
 */

/* NOTES:
recall from chapter 4, the format and encoding of an instruction:
if opcode (address[15]) == 0, it's an A instruction
if opcode (address[15]) == 1, it's a  C instruction

C instruction:
         |opcode|---- compare ----|- dest -|- jump -|
binary:        1 1 1 a c1 c2 c3 c4 c5 c6 d1 d2 d3 j1 j2 j3

A instruction:
The A-instruction is used to set the A register to a 15-bit value
         |opcode|----- value -----|
binary:        0 vvv vvvv vvvv vvvv


ALU output:
if (out == 0) zr = 1, else zr = 0
if (out < 0) ng = 1, else ng = 0

J (j1, j2, j3, zr, ng) = 1 if condition is true, 0 otherwise

*/


CHIP CPU {

    IN  inM[16],         // M value input  (M = contents of RAM[A])
        instruction[16], // Instruction for execution
        reset;           // Signals whether to re-start the current
                         // program (reset==1) or continue executing
                         // the current program (reset==0).

    OUT outM[16],        // M value output
        writeM,          // Write to M? 
        addressM[15],    // Address in data memory (of M)
        pc[15];          // address of next instruction

    PARTS:
    Mux16(a=instruction, b=previous, sel=instruction[15], out=mux1);   // if A instruction, route instruction, else if C instruction, route from previous
    Not(in=instruction[15], out=AInstruction);        // since the bit signifying an A instruction is 0, flip it here so Or() can be used below
    Or(a=AInstruction, b=instruction[5], out=loadA);  // if (it's a C instruction with inst[5] == 1) or (regular A instruction) assert ARegister load load bit
    ARegister(in=mux1, load=loadA, out=ARegOut, out[0..14]=addressM);
    
    And(a=instruction[15], b=instruction[4], out=loadD);
    DRegister(in=previous, load=loadD, out=DRegOut);

    And(a=instruction[15], b=instruction[12], out=AorM);
    Mux16(a=ARegOut, b=inM, sel=AorM, out=mux2);

    And(a=instruction[15], b=instruction[3], out=writeM);  // if it's a C instruction and the M bit [3] is asserted, handle writeM instruction
    
    ALU(x=DRegOut, y=mux2, zx=instruction[11], nx=instruction[10],
        zy=instruction[9], ny=instruction[8], f=instruction[7],
        no=instruction[6], out=outM, out=previous, zr=zr, ng=ng);

    // ------------- begin branch determination logic -------------
    // only equals, less than, greater than are needed. Other comparisons are merely combinations of these 3 and thus are superfluous
    Not(in=zr, out=notzr);  // if ALU out is zero this will be 0. else if ALU out is not zero, this outputs 1
    Not(in=ng, out=pos);    // if ALU out is negative this will be 0. else if ALU out is pos, this outputs 1

    // 001: JGT; if (ALU out > 0) jump
    And(a=notzr, b=pos, out=gtz);  // ALU out is greater than zero 
    And(a=instruction[0], b=gtz, out=jgt);

    // 010: JEQ; if (ALU out == 0) jump
    And(a=instruction[1], b=true, out=olo);
    And(a=zr, b=olo, out=jeq);

    // 100: JLT; if (ALU out < 0) jump
    And(a=instruction[2], b=true, out=loo);
    And(a=loo, b=ng, out=jlt);

    // if any of the final jmp calculations are true, use that as the LOAD flag for the PC.
    // use the negated jump output as the increment flag.
    Or(a=jgt, b=jeq, out=j1);
    Or(a=j1, b=jlt, out=possibleJmp);
    And(a=instruction[15], b=possibleJmp, out=jmp);  // this prevents A instructions from being misinterpreted as jumps
    // -------------- end branch determination logic --------------

    // address comes from A register via `ARegOut`
    PC(in=ARegOut, load=jmp, inc=true, reset=reset, out[0..14]=pc);
}
